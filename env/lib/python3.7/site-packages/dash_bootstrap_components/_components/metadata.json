{"src/components/Alert.js": {"description": "", "displayName": "Alert", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component."}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "color": {"type": {"name": "string"}, "required": false, "description": "Alert color, options: primary, secondary, success, info, warning, danger,\nlink. Default: secondary."}, "is_open": {"type": {"name": "bool"}, "required": false, "description": "Whether alert is open. Default: True."}, "fade": {"type": {"name": "bool"}, "required": false, "description": "If True, a fade animation will be applied when `is_open` is toggled. If\nFalse the Alert will simply appear and disappear."}}}, "src/components/Badge.js": {"description": "", "displayName": "Badge", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component."}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "color": {"type": {"name": "string"}, "required": false, "description": "Badge color, options: primary, secondary, success, info, warning, danger,\nlink. Default: secondary."}, "pill": {"type": {"name": "bool"}, "required": false, "description": "Make badge \"pill\" shaped (rounded ends, like a pill). Default: False."}, "href": {"type": {"name": "string"}, "required": false, "description": "Attach link to badge."}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the Badge. Default: span."}}}, "src/components/Button.js": {"description": "", "displayName": "Button", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "n_clicks": {"type": {"name": "number"}, "required": false, "description": "An integer that represents the number of times\nthat this element has been clicked on.", "defaultValue": {"value": "0", "computed": false}}, "n_clicks_timestamp": {"type": {"name": "number"}, "required": false, "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.", "defaultValue": {"value": "-1", "computed": false}}, "active": {"type": {"name": "bool"}, "required": false, "description": "Whether button is in active state. Default: False."}, "block": {"type": {"name": "bool"}, "required": false, "description": "Create block level button, one that spans the full width of its parent.\nDefault: False"}, "color": {"type": {"name": "string"}, "required": false, "description": "Button color, options: primary, secondary, success, info, warning, danger,\nlink. Default: secondary."}, "disabled": {"type": {"name": "bool"}, "required": false, "description": "Disable button (make unclickable). Default: False."}, "size": {"type": {"name": "string"}, "required": false, "description": "Button size, options: 'lg', 'md', 'sm'."}, "outline": {"type": {"name": "bool"}, "required": false, "description": "Set outline button style, which removes background images and colors for a\nlightweight style."}}}, "src/components/ButtonGroup.js": {"description": "", "displayName": "ButtonGroup", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "vertical": {"type": {"name": "bool"}, "required": false, "description": "Group buttons vertically."}, "size": {"type": {"name": "string"}, "required": false, "description": "Size of button group, options: 'sm', 'md', 'lg'."}}}, "src/components/Collapse.js": {"description": "", "displayName": "Collapse", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component."}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the collapse contents. Default: div."}, "is_open": {"type": {"name": "bool"}, "required": false, "description": "Whether collapse is currently open."}, "navbar": {"type": {"name": "bool"}, "required": false, "description": "Set to True when using a collapse inside a navbar."}}}, "src/components/DropdownMenu.js": {"description": "", "displayName": "DropdownMenu", "methods": [{"name": "toggle", "docblock": null, "modifiers": [], "params": [], "returns": null}], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component."}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "label": {"type": {"name": "string"}, "required": false, "description": "Label for the DropdownMenu toggle."}, "direction": {"type": {"name": "enum", "value": [{"value": "'down'", "computed": false}, {"value": "'left'", "computed": false}, {"value": "'right'", "computed": false}]}, "required": false, "description": "Direction in which to expand the dropdown. Note that expanding\nthe dropdown upwards is currently unsupported. Default: 'down'."}, "in_navbar": {"type": {"name": "bool"}, "required": false, "description": "Set this to True if the dropdown is inside a navbar. Default: False."}, "addon_type": {"type": {"name": "union", "value": [{"name": "bool"}, {"name": "enum", "value": [{"value": "'prepend'", "computed": false}, {"value": "'append'", "computed": false}]}]}, "required": false, "description": "Set this to 'prepend' or 'append' if the dropdown menu is being used in an input group."}, "disabled": {"type": {"name": "bool"}, "required": false, "description": "Disable the dropdown.", "defaultValue": {"value": "false", "computed": false}}, "nav": {"type": {"name": "bool"}, "required": false, "description": "Set this to True if the dropdown is inside a nav for styling consistent\nwith other nav items. Default: False."}, "caret": {"type": {"name": "bool"}, "required": false, "description": "Add a caret to the dropdown toggle. Default: True.", "defaultValue": {"value": "true", "computed": false}}, "bs_size": {"type": {"name": "enum", "value": [{"value": "'sm'", "computed": false}, {"value": "'md'", "computed": false}, {"value": "'lg'", "computed": false}]}, "required": false, "description": "Size of the dropdown. 'sm' corresponds to small, 'md' to medium\nand 'lg' to large."}}}, "src/components/DropdownMenuItem.js": {"description": "", "displayName": "DropdownMenuItem", "methods": [{"name": "incrementClicks", "docblock": null, "modifiers": [], "params": [], "returns": null}], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component."}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "active": {"type": {"name": "bool"}, "required": false, "description": "Style this item as 'active'."}, "disabled": {"type": {"name": "bool"}, "required": false, "description": "Style this item as 'disabled'."}, "divider": {"type": {"name": "bool"}, "required": false, "description": "Set to True if this entry is a divider. Typically, it will have\nno children."}, "header": {"type": {"name": "bool"}, "required": false, "description": "Set to True if this is a header, rather than a conventional\nmenu item."}, "href": {"type": {"name": "string"}, "required": false, "description": "Pass a URL (relative or absolute) to make the menu entry a link."}, "external_link": {"type": {"name": "bool"}, "required": false, "description": "If true, the browser will treat this as an external link,\nforcing a page refresh at the new location. If false,\nthis just changes the location without triggering a page\nrefresh. Use this if you are observing dcc.Location, for\ninstance. Defaults to true for absolute URLs and false\notherwise."}, "n_clicks": {"type": {"name": "number"}, "required": false, "description": "An integer that represents the number of times\nthat this element has been clicked on.", "defaultValue": {"value": "0", "computed": false}}, "n_clicks_timestamp": {"type": {"name": "number"}, "required": false, "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.", "defaultValue": {"value": "-1", "computed": false}}}}, "src/components/Fade.js": {"description": "", "displayName": "Fade", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "is_in": {"type": {"name": "bool"}, "required": false, "description": "Controls whether the children of the Fade component are currently visible\nor not."}, "timeout": {"type": {"name": "union", "value": [{"name": "number"}, {"name": "shape", "value": {"enter": {"name": "number", "required": false}, "exit": {"name": "number", "required": false}}}]}, "required": false, "description": "The duration of the transition, in milliseconds.\n\nYou may specify a single timeout for all transitions like: `timeout=500`\nor individually like: timeout={'enter': 300, 'exit': 500}"}, "appear": {"type": {"name": "bool"}, "required": false, "description": "Show fade-in animation on initial page load. Default: True."}, "enter": {"type": {"name": "bool"}, "required": false, "description": "Enable or disable enter transitions. Default: True."}, "exit": {"type": {"name": "bool"}, "required": false, "description": "Enable or disable exit transitions. Default: True."}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the fade component. Default: div."}, "base_class": {"type": {"name": "string"}, "required": false, "description": "CSS base class. Note that this class is always used, whether the\ncomponents are showing or hidden. Default: 'fade'"}, "base_class_active": {"type": {"name": "string"}, "required": false, "description": "CSS class used when the fade contents are displayed. Default: 'show'."}}}, "src/components/Jumbotron.js": {"description": "", "displayName": "Jumbotron", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component."}, "fluid": {"type": {"name": "bool"}, "required": false, "description": "If True, the jumbotron will grow to use the entire\nhorizontal space of its parent. Default: False."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the Jumbotron. Default: div."}}}, "src/components/Label.js": {"description": "", "displayName": "Label", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "hidden": {"type": {"name": "bool"}, "required": false, "description": "Hide label from UI, but allow it to be discovered by screen-readers."}, "size": {"type": {"name": "string"}, "required": false, "description": "Set size of label. Options 'sm', 'md' (default) or 'lg'."}, "html_for": {"type": {"name": "string"}, "required": false, "description": "Set the `for` attribute of the label to bind it to a particular element"}, "width": {"type": {"name": "custom", "raw": "columnProps"}, "required": false, "description": "Specify width of label for use in grid layouts. Accepts the same values\nas the Col component."}, "xs": {"type": {"name": "custom", "raw": "columnProps"}, "required": false, "description": "Specify label width on extra small screen\n\nValid arguments are boolean, an integer in the range 1-12 inclusive, or a\ndictionary with keys 'offset', 'order', 'size'. See the documentation for\nmore details."}, "sm": {"type": {"name": "custom", "raw": "columnProps"}, "required": false, "description": "Specify label width on a small screen\n\nValid arguments are boolean, an integer in the range 1-12 inclusive, or a\ndictionary with keys 'offset', 'order', 'size'. See the documentation for\nmore details."}, "md": {"type": {"name": "custom", "raw": "columnProps"}, "required": false, "description": "Specify label width on a medium screen\n\nValid arguments are boolean, an integer in the range 1-12 inclusive, or a\ndictionary with keys 'offset', 'order', 'size'. See the documentation for\nmore details."}, "lg": {"type": {"name": "custom", "raw": "columnProps"}, "required": false, "description": "Specify label width on a large screen\n\nValid arguments are boolean, an integer in the range 1-12 inclusive, or a\ndictionary with keys 'offset', 'order', 'size'. See the documentation for\nmore details."}, "xl": {"type": {"name": "custom", "raw": "columnProps"}, "required": false, "description": "Specify label width on an extra large screen\n\nValid arguments are boolean, an integer in the range 1-12 inclusive, or a\ndictionary with keys 'offset', 'order', 'size'. See the documentation for\nmore details."}, "align": {"type": {"name": "enum", "value": [{"value": "'start'", "computed": false}, {"value": "'center'", "computed": false}, {"value": "'end'", "computed": false}]}, "required": false, "description": "Set vertical alignment of the label, options: 'start', 'center', 'end',\ndefault: 'center'", "defaultValue": {"value": "'center'", "computed": false}}, "color": {"type": {"name": "string"}, "required": false, "description": "Text color, options: primary, secondary, success, warning, danger, info,\nmuted, light, dark, body, white, black-50, white-50."}}}, "src/components/Popover.js": {"description": "", "displayName": "Popover", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "placement": {"type": {"name": "enum", "value": [{"value": "'auto'", "computed": false}, {"value": "'auto-start'", "computed": false}, {"value": "'auto-end'", "computed": false}, {"value": "'top'", "computed": false}, {"value": "'top-start'", "computed": false}, {"value": "'top-end'", "computed": false}, {"value": "'right'", "computed": false}, {"value": "'right-start'", "computed": false}, {"value": "'right-end'", "computed": false}, {"value": "'bottom'", "computed": false}, {"value": "'bottom-start'", "computed": false}, {"value": "'bottom-end'", "computed": false}, {"value": "'left'", "computed": false}, {"value": "'left-start'", "computed": false}, {"value": "'left-end'", "computed": false}]}, "required": false, "description": "Specify popover placement."}, "target": {"type": {"name": "string"}, "required": false, "description": "ID of the component to attach the popover to."}, "container": {"type": {"name": "string"}, "required": false, "description": "Where to inject the popper DOM node, default body."}, "is_open": {"type": {"name": "bool"}, "required": false, "description": "Whether the Popover is open or not."}, "hide_arrow": {"type": {"name": "bool"}, "required": false, "description": "Hide popover arrow."}, "innerClassName": {"type": {"name": "string"}, "required": false, "description": "CSS class to apply to the popover."}, "delay": {"type": {"name": "union", "value": [{"name": "shape", "value": {"show": {"name": "number", "required": false}, "hide": {"name": "number", "required": false}}}, {"name": "number"}]}, "required": false, "description": "Optionally override show/hide delays - default {show: 0, hide: 250}"}, "offset": {"type": {"name": "union", "value": [{"name": "string"}, {"name": "number"}]}, "required": false, "description": "Popover offset."}}}, "src/components/PopoverBody.js": {"description": "", "displayName": "PopoverBody", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the PopoverBody, default: div"}}}, "src/components/PopoverHeader.js": {"description": "", "displayName": "PopoverHeader", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the PopoverHeader, default: h3"}}}, "src/components/Progress.js": {"description": "", "displayName": "Progress", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the progress bar, default: div"}, "bar": {"type": {"name": "bool"}, "required": false, "description": "Apply progress-bar class, for use inside a multi progress bar."}, "multi": {"type": {"name": "bool"}, "required": false, "description": "Create container for multiple progress bars"}, "max": {"type": {"name": "union", "value": [{"name": "string"}, {"name": "number"}]}, "required": false, "description": "Upper limit for value, default: 100"}, "value": {"type": {"name": "union", "value": [{"name": "string"}, {"name": "number"}]}, "required": false, "description": "Specify progress, value from 0 to max inclusive."}, "animated": {"type": {"name": "bool"}, "required": false, "description": "Animate the bar, must have striped set to True to work."}, "striped": {"type": {"name": "bool"}, "required": false, "description": "Use striped progress bar"}, "color": {"type": {"name": "string"}, "required": false, "description": "Set color of the progress bar, options: primary, secondary, success,\nwarning, danger, info."}, "barClassName": {"type": {"name": "string"}, "required": false, "description": "CSS classes to apply to the bar."}}}, "src/components/Table.js": {"description": "", "displayName": "Table", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "union", "value": [{"name": "func"}, {"name": "string"}]}, "required": false, "description": "HTML tag to use for the table, default: table"}, "size": {"type": {"name": "string"}, "required": false, "description": "Specify table size, options: 'sm', 'md', 'lg'"}, "bordered": {"type": {"name": "bool"}, "required": false, "description": "Apply the `table-bordered` class which adds borders on all sides of the\ntable and cells."}, "borderless": {"type": {"name": "bool"}, "required": false, "description": "Apply the `table-borderless` class which removes all borders from the\ntable and cells."}, "striped": {"type": {"name": "bool"}, "required": false, "description": "Apply the `table-striped` class which applies 'zebra striping' to rows in\nthe table body."}, "dark": {"type": {"name": "bool"}, "required": false, "description": "Apply the `table-dark` class for dark cell backgrounds and light text."}, "hover": {"type": {"name": "bool"}, "required": false, "description": "Apply the `table-hover` class which enables a hover state on table rows\nwithin the table body."}, "responsive": {"type": {"name": "enum", "value": [{"value": "PropTypes.bool", "computed": true}, {"value": "PropTypes.string", "computed": true}]}, "required": false, "description": "Set to True or one of the breakpoints 'sm', 'md', 'lg', 'xl' to make table\nscroll horizontally at lower breakpoints."}}}, "src/components/Tooltip.js": {"description": "", "displayName": "Tooltip", "methods": [{"name": "toggle", "docblock": null, "modifiers": [], "params": [], "returns": null}], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "target": {"type": {"name": "string"}, "required": false, "description": "The id of the element to attach the tooltip to"}, "boundaries_element": {"type": {"name": "string"}, "required": false, "description": "Boundaries for popper, can be scrollParent, window, viewport, or any DOM\nelement"}, "hide_arrow": {"type": {"name": "bool"}, "required": false, "description": "Hide arrow on tooltip"}, "container": {"type": {"name": "string"}, "required": false, "description": "Where to inject the popper DOM node, default body"}, "delay": {"type": {"name": "union", "value": [{"name": "shape", "value": {"show": {"name": "number", "required": false}, "hide": {"name": "number", "required": false}}}, {"name": "number"}]}, "required": false, "description": "optionally override show/hide delays - default { show: 0, hide: 250 }"}, "innerClassName": {"type": {"name": "string"}, "required": false, "description": "CSS classes to apply to the inner-tooltip"}, "arrowClassName": {"type": {"name": "string"}, "required": false, "description": "CSS classes to apply to the arrow-tooltip ('arrow' by default)"}, "autohide": {"type": {"name": "bool"}, "required": false, "description": "Optionally hide tooltip when hovering over tooltip content - default true"}, "placement": {"type": {"name": "enum", "value": [{"value": "'auto'", "computed": false}, {"value": "'auto-start'", "computed": false}, {"value": "'auto-end'", "computed": false}, {"value": "'top'", "computed": false}, {"value": "'top-start'", "computed": false}, {"value": "'top-end'", "computed": false}, {"value": "'right'", "computed": false}, {"value": "'right-start'", "computed": false}, {"value": "'right-end'", "computed": false}, {"value": "'bottom'", "computed": false}, {"value": "'bottom-start'", "computed": false}, {"value": "'bottom-end'", "computed": false}, {"value": "'left'", "computed": false}, {"value": "'left-start'", "computed": false}, {"value": "'left-end'", "computed": false}]}, "required": false, "description": "How to place the tooltip."}, "offset": {"type": {"name": "union", "value": [{"name": "string"}, {"name": "number"}]}, "required": false, "description": "Tooltip offset"}}}, "src/components/card/Card.js": {"description": "", "displayName": "Card", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "color": {"type": {"name": "string"}, "required": false, "description": "Card color, options: primary, secondary, success, info, warning, danger,\nlight, dark. Default is light."}, "body": {"type": {"name": "bool"}, "required": false, "description": "Apply the `card-body` class to the card, so that there is no need to also\ninclude a CardBody component in the children of this Card. Default: False"}, "outline": {"type": {"name": "bool"}, "required": false, "description": "Apply color styling to just the border of the card."}, "inverse": {"type": {"name": "bool"}, "required": false, "description": "Invert text colours for use with a darker background."}}}, "src/components/card/CardBody.js": {"description": "", "displayName": "CardBody", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the card body, default: div"}}}, "src/components/card/CardColumns.js": {"description": "", "displayName": "CardColumns", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the card columns container, default: div"}}}, "src/components/card/CardDeck.js": {"description": "", "displayName": "CardDeck", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the card deck, default: div"}}}, "src/components/card/CardFooter.js": {"description": "", "displayName": "CardFooter", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the card footer, default: div"}}}, "src/components/card/CardGroup.js": {"description": "", "displayName": "CardGroup", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the card group, default: div"}}}, "src/components/card/CardHeader.js": {"description": "", "displayName": "CardHeader", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the card header, default: div"}}}, "src/components/card/CardImg.js": {"description": "", "displayName": "CardImg", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the card body, default: div"}, "top": {"type": {"name": "bool"}, "required": false, "description": "Set to True if image is at top of card. This will apply the card-img-top\nclass which rounds the top corners to match the corners of the card."}, "bottom": {"type": {"name": "bool"}, "required": false, "description": "Set to True if image is at bottom of card. This will apply the\ncard-img-bottom class which rounds the bottom corners to match the corners\nof the card."}, "src": {"type": {"name": "string"}, "required": false, "description": "The URI of the embeddable content."}, "alt": {"type": {"name": "string"}, "required": false, "description": "Alternative text in case an image can't be displayed."}, "title": {"type": {"name": "string"}, "required": false, "description": "Text to be displayed as a tooltip when hovering"}}}, "src/components/card/CardImgOverlay.js": {"description": "", "displayName": "CardImgOverlay", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the card image overlay, default: div"}}}, "src/components/card/CardLink.js": {"description": "", "displayName": "CardLink", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "href": {"type": {"name": "string"}, "required": false, "description": "URL of the resource to link to"}, "external_link": {"type": {"name": "bool"}, "required": false, "description": "If true, the browser will treat this as an external link,\nforcing a page refresh at the new location. If false,\nthis just changes the location without triggering a page\nrefresh. Use this if you are observing dcc.Location, for\ninstance. Defaults to true for absolute URLs and false\notherwise."}, "n_clicks": {"type": {"name": "number"}, "required": false, "description": "An integer that represents the number of times\nthat this element has been clicked on."}, "n_clicks_timestamp": {"type": {"name": "number"}, "required": false, "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently."}}}, "src/components/card/CardSubtitle.js": {"description": "", "displayName": "CardSubtitle", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the card subtitle, default: h6"}, "color": {"type": {"name": "string"}, "required": false, "description": "Text color, options: primary, secondary, success, warning, danger, info,\nmuted, light, dark, body, white, black-50, white-50."}}}, "src/components/card/CardText.js": {"description": "", "displayName": "CardText", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the card text, default: p"}, "color": {"type": {"name": "string"}, "required": false, "description": "Text color, options: primary, secondary, success, warning, danger, info,\nmuted, light, dark, body, white, black-50, white-50."}}}, "src/components/card/CardTitle.js": {"description": "", "displayName": "CardTitle", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the card body, default: h5"}, "color": {"type": {"name": "string"}, "required": false, "description": "Text color, options: primary, secondary, success, warning, danger, info,\nmuted, light, dark, body, white, black-50, white-50."}}}, "src/components/form/Form.js": {"description": "", "displayName": "Form", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "inline": {"type": {"name": "bool"}, "required": false, "description": "Use inline=True to apply the `form-inline` class, allowing you to display\na series of labels, form controls, and buttons on a single horizontal row.\nForm controls within inline forms vary slightly from their default states."}}}, "src/components/form/FormFeedback.js": {"description": "", "displayName": "FormFeedback", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "valid": {"type": {"name": "bool"}, "required": false, "description": "If True apply the valid styling to the feedback, else apply invalid\nstyling."}, "tooltip": {"type": {"name": "bool"}, "required": false, "description": "Use styled tooltips to display validation feedback."}}}, "src/components/form/FormGroup.js": {"description": "", "displayName": "FormGroup", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "row": {"type": {"name": "bool"}, "required": false, "description": "Apply row class to FormGroup to allow labels and inputs to be displayed\nhorizontally in a row."}, "check": {"type": {"name": "bool"}, "required": false, "description": "Apply `form-check` class instead of `form-group`. Useful when positioning\nlabels with checkbox / radio inputs. Usually it will be better to use the\npre-built dbc.Checklist or dbc.RadioItems components."}, "inline": {"type": {"name": "bool"}, "required": false, "description": "If check is True, apply the `form-check-inline` class in addition to\n`form-check`. If you want to make an inline list of checkboxes / radios\nwe recommend using either dbc.Checklist or dbc.RadioItems with inline=True\n\nThis prop has no effect if check=False."}}}, "src/components/form/FormText.js": {"description": "", "displayName": "FormText", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "color": {"type": {"name": "string"}, "required": false, "description": "Text color, options: primary, secondary, success, warning, danger, info,\nmuted, light, dark, body, white, black-50, white-50."}}}, "src/components/input/Checkbox.js": {"description": "", "displayName": "Checkbox", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": ""}, "checked": {"type": {"name": "bool"}, "required": false, "description": "Whether RadioButton has been checked or not"}, "className": {"type": {"name": "string"}, "required": false, "description": "The class of the container (div)"}, "style": {"type": {"name": "object"}, "required": false, "description": "The style of the container (div)"}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "setProps": {"type": {"name": "func"}, "required": false, "description": "Dash-assigned callback that gets fired when the value changes."}}}, "src/components/input/Checklist.js": {"description": "Checklist is a component that encapsulates several checkboxes.\nThe values and labels of the checklist is specified in the `options`\nproperty and the checked items are specified with the `values` property.\nEach checkbox is rendered as an input with a surrounding label.", "displayName": "Checklist", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": ""}, "options": {"type": {"name": "arrayOf", "value": {"name": "shape", "value": {"label": {"name": "string", "description": "The checkbox's label", "required": false}, "value": {"name": "string", "description": "The value of the checkbox. This value\ncorresponds to the items specified in the\n`values` property.", "required": false}, "disabled": {"name": "bool", "description": "If true, this checkbox is disabled and can't be clicked on.", "required": false}}}}, "required": false, "description": "An array of options", "defaultValue": {"value": "[]", "computed": false}}, "values": {"type": {"name": "arrayOf", "value": {"name": "string"}}, "required": false, "description": "The currently selected value"}, "className": {"type": {"name": "string"}, "required": false, "description": "The class of the container (div)"}, "style": {"type": {"name": "object"}, "required": false, "description": "The style of the container (div)"}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "inputStyle": {"type": {"name": "object"}, "required": false, "description": "The style of the <input> checkbox element", "defaultValue": {"value": "{}", "computed": false}}, "inputClassName": {"type": {"name": "string"}, "required": false, "description": "The class of the <input> checkbox element", "defaultValue": {"value": "''", "computed": false}}, "labelStyle": {"type": {"name": "object"}, "required": false, "description": "The style of the <label> that wraps the checkbox input\n and the option's label", "defaultValue": {"value": "{}", "computed": false}}, "labelClassName": {"type": {"name": "string"}, "required": false, "description": "The class of the <label> that wraps the checkbox input\n and the option's label", "defaultValue": {"value": "''", "computed": false}}, "setProps": {"type": {"name": "func"}, "required": false, "description": "Dash-assigned callback that gets fired when the value changes."}, "inline": {"type": {"name": "bool"}, "required": false, "description": "Arrange Checklist inline"}}}, "src/components/input/DatePickerRange.js": {"description": "DatePickerRange is a tailor made component designed for selecting\ntimespan across multiple days off of a calendar.\n\nThe DatePicker integrates well with the Python datetime module with the\nstartDate and endDate being returned in a string format suitable for\ncreating datetime objects.\n\nThis component is based off of Airbnb's react-dates react component\nwhich can be found here: https://github.com/airbnb/react-dates", "displayName": "DatePickerRange", "methods": [{"name": "propsToState", "docblock": null, "modifiers": [], "params": [{"name": "newProps", "type": null}], "returns": null}, {"name": "onDatesChange", "docblock": null, "modifiers": [], "params": [{"name": "{startDate: start_date, endDate: end_date}", "type": null}], "returns": null}, {"name": "isOutsideRange", "docblock": null, "modifiers": [], "params": [{"name": "date", "type": null}], "returns": null}], "props": {"id": {"type": {"name": "string"}, "required": false, "description": ""}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "start_date": {"type": {"name": "string"}, "required": false, "description": "Specifies the starting date for the component.\nAccepts datetime.datetime objects or strings\nin the format 'YYYY-MM-DD'"}, "end_date": {"type": {"name": "string"}, "required": false, "description": "Specifies the ending date for the component.\nAccepts datetime.datetime objects or strings\nin the format 'YYYY-MM-DD'"}, "min_date_allowed": {"type": {"name": "string"}, "required": false, "description": "Specifies the lowest selectable date for the component.\nAccepts datetime.datetime objects or strings\nin the format 'YYYY-MM-DD'"}, "max_date_allowed": {"type": {"name": "string"}, "required": false, "description": "Specifies the highest selectable date for the component.\nAccepts datetime.datetime objects or strings\nin the format 'YYYY-MM-DD'"}, "initial_visible_month": {"type": {"name": "string"}, "required": false, "description": "Specifies the month that is initially presented when the user\nopens the calendar. Accepts datetime.datetime objects or strings\nin the format 'YYYY-MM-DD'"}, "start_date_placeholder_text": {"type": {"name": "string"}, "required": false, "description": "Text that will be displayed in the first input\nbox of the date picker when no date is selected. Default value is 'Start Date'"}, "end_date_placeholder_text": {"type": {"name": "string"}, "required": false, "description": "Text that will be displayed in the second input\nbox of the date picker when no date is selected. Default value is 'End Date'"}, "day_size": {"type": {"name": "number"}, "required": false, "description": "Size of rendered calendar days, higher number\nmeans bigger day size and larger calendar overall", "defaultValue": {"value": "39", "computed": false}}, "calendar_orientation": {"type": {"name": "enum", "value": [{"value": "'vertical'", "computed": false}, {"value": "'horizontal'", "computed": false}]}, "required": false, "description": "Orientation of calendar, either vertical or horizontal.\nValid options are 'vertical' or 'horizontal'.", "defaultValue": {"value": "'horizontal'", "computed": false}}, "is_RTL": {"type": {"name": "bool"}, "required": false, "description": "Determines whether the calendar and days operate\nfrom left to right or from right to left", "defaultValue": {"value": "false", "computed": false}}, "reopen_calendar_on_clear": {"type": {"name": "bool"}, "required": false, "description": "If True, the calendar will automatically open when cleared", "defaultValue": {"value": "false", "computed": false}}, "number_of_months_shown": {"type": {"name": "number"}, "required": false, "description": "Number of calendar months that are shown when calendar is opened", "defaultValue": {"value": "1", "computed": false}}, "with_portal": {"type": {"name": "bool"}, "required": false, "description": "If True, calendar will open in a screen overlay portal,\nnot supported on vertical calendar", "defaultValue": {"value": "false", "computed": false}}, "with_full_screen_portal": {"type": {"name": "bool"}, "required": false, "description": "If True, calendar will open in a full screen overlay portal, will\ntake precedent over 'withPortal' if both are set to true,\nnot supported on vertical calendar", "defaultValue": {"value": "false", "computed": false}}, "first_day_of_week": {"type": {"name": "enum", "value": [{"value": "0", "computed": false}, {"value": "1", "computed": false}, {"value": "2", "computed": false}, {"value": "3", "computed": false}, {"value": "4", "computed": false}, {"value": "5", "computed": false}, {"value": "6", "computed": false}]}, "required": false, "description": "Specifies what day is the first day of the week, values must be\nfrom [0, ..., 6] with 0 denoting Sunday and 6 denoting Saturday", "defaultValue": {"value": "0", "computed": false}}, "minimum_nights": {"type": {"name": "number"}, "required": false, "description": "Specifies a minimum number of nights that must be selected between\nthe startDate and the endDate"}, "stay_open_on_select": {"type": {"name": "bool"}, "required": false, "description": "If True the calendar will not close when the user has selected a value\nand will wait until the user clicks off the calendar", "defaultValue": {"value": "false", "computed": false}}, "show_outside_days": {"type": {"name": "bool"}, "required": false, "description": "If True the calendar will display days that rollover into\nthe next month"}, "month_format": {"type": {"name": "string"}, "required": false, "description": "Specifies the format that the month will be displayed in the calendar,\nvalid formats are variations of \"MM YY\". For example:\n\"MM YY\" renders as '05 97' for May 1997\n\"MMMM, YYYY\" renders as 'May, 1997' for May 1997\n\"MMM, YY\" renders as 'Sep, 97' for September 1997"}, "display_format": {"type": {"name": "string"}, "required": false, "description": "Specifies the format that the selected dates will be displayed\nvalid formats are variations of \"MM YY DD\". For example:\n\"MM YY DD\" renders as '05 10 97' for May 10th 1997\n\"MMMM, YY\" renders as 'May, 1997' for May 10th 1997\n\"M, D, YYYY\" renders as '07, 10, 1997' for September 10th 1997\n\"MMMM\" renders as 'May' for May 10 1997"}, "disabled": {"type": {"name": "bool"}, "required": false, "description": "If True, no dates can be selected.", "defaultValue": {"value": "false", "computed": false}}, "clearable": {"type": {"name": "bool"}, "required": false, "description": "Whether or not the dropdown is \"clearable\", that is, whether or\nnot a small \"x\" appears on the right of the dropdown that removes\nthe selected value.", "defaultValue": {"value": "false", "computed": false}}, "setProps": {"type": {"name": "func"}, "required": false, "description": "Dash-assigned callback that gets fired when the value changes."}, "updatemode": {"type": {"name": "enum", "value": [{"value": "'singledate'", "computed": false}, {"value": "'bothdates'", "computed": false}]}, "required": false, "description": "Determines when the component should update\nits value. If `bothdates`, then the DatePicker\nwill only trigger its value when the user has\nfinished picking both dates. If `singledate`, then\nthe DatePicker will update its value\nas one date is picked.", "defaultValue": {"value": "'singledate'", "computed": false}}, "disabled_days": {"type": {"name": "arrayOf", "value": {"name": "string"}}, "required": false, "description": "A list of days to disable in addition to any that fall outside of the range\nspecified by min_date_allowed and max_date_allowed."}, "bs_size": {"type": {"name": "enum", "value": [{"value": "'sm'", "computed": false}, {"value": "'md'", "computed": false}, {"value": "'lg'", "computed": false}]}, "required": false, "description": "Set the size of the DatePickerRange. Options: 'sm' (small), 'md' (medium)\nor 'lg' (large). Default is 'md'."}}}, "src/components/input/DatePickerSingle.js": {"description": "DatePickerSingle is a tailor made component designed for selecting\na single day off of a calendar.\n\nThe DatePicker integrates well with the Python datetime module with the\nstartDate and endDate being returned in a string format suitable for\ncreating datetime objects.\n\nThis component is based off of Airbnb's react-dates react component\nwhich can be found here: https://github.com/airbnb/react-dates", "displayName": "DatePickerSingle", "methods": [{"name": "propsToState", "docblock": null, "modifiers": [], "params": [{"name": "newProps", "type": null}], "returns": null}, {"name": "isOutsideRange", "docblock": null, "modifiers": [], "params": [{"name": "date", "type": null}], "returns": null}, {"name": "onDateChange", "docblock": null, "modifiers": [], "params": [{"name": "date", "type": null}], "returns": null}], "props": {"id": {"type": {"name": "string"}, "required": false, "description": ""}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "date": {"type": {"name": "string"}, "required": false, "description": "Specifies the starting date for the component, best practice is to pass\nvalue via datetime object"}, "min_date_allowed": {"type": {"name": "string"}, "required": false, "description": "Specifies the lowest selectable date for the component.\nAccepts datetime.datetime objects or strings\nin the format 'YYYY-MM-DD'"}, "max_date_allowed": {"type": {"name": "string"}, "required": false, "description": "Specifies the highest selectable date for the component.\nAccepts datetime.datetime objects or strings\nin the format 'YYYY-MM-DD'"}, "initial_visible_month": {"type": {"name": "string"}, "required": false, "description": "Specifies the month that is initially presented when the user\nopens the calendar. Accepts datetime.datetime objects or strings\nin the format 'YYYY-MM-DD'"}, "day_size": {"type": {"name": "number"}, "required": false, "description": "Size of rendered calendar days, higher number\nmeans bigger day size and larger calendar overall", "defaultValue": {"value": "39", "computed": false}}, "calendar_orientation": {"type": {"name": "enum", "value": [{"value": "'vertical'", "computed": false}, {"value": "'horizontal'", "computed": false}]}, "required": false, "description": "Orientation of calendar, either vertical or horizontal.\nValid options are 'vertical' or 'horizontal'.", "defaultValue": {"value": "'horizontal'", "computed": false}}, "is_RTL": {"type": {"name": "bool"}, "required": false, "description": "Determines whether the calendar and days operate\nfrom left to right or from right to left", "defaultValue": {"value": "false", "computed": false}}, "placeholder": {"type": {"name": "string"}, "required": false, "description": "Text that will be displayed in the input\nbox of the date picker when no date is selected.\nDefault value is 'Start Date'"}, "reopen_calendar_on_clear": {"type": {"name": "bool"}, "required": false, "description": "If True, the calendar will automatically open when cleared", "defaultValue": {"value": "false", "computed": false}}, "number_of_months_shown": {"type": {"name": "number"}, "required": false, "description": "Number of calendar months that are shown when calendar is opened", "defaultValue": {"value": "1", "computed": false}}, "with_portal": {"type": {"name": "bool"}, "required": false, "description": "If True, calendar will open in a screen overlay portal,\nnot supported on vertical calendar", "defaultValue": {"value": "false", "computed": false}}, "with_full_screen_portal": {"type": {"name": "bool"}, "required": false, "description": "If True, calendar will open in a full screen overlay portal, will\ntake precedent over 'withPortal' if both are set to True,\nnot supported on vertical calendar", "defaultValue": {"value": "false", "computed": false}}, "first_day_of_week": {"type": {"name": "enum", "value": [{"value": "0", "computed": false}, {"value": "1", "computed": false}, {"value": "2", "computed": false}, {"value": "3", "computed": false}, {"value": "4", "computed": false}, {"value": "5", "computed": false}, {"value": "6", "computed": false}]}, "required": false, "description": "Specifies what day is the first day of the week, values must be\nfrom [0, ..., 6] with 0 denoting Sunday and 6 denoting Saturday", "defaultValue": {"value": "0", "computed": false}}, "stay_open_on_select": {"type": {"name": "bool"}, "required": false, "description": "If True the calendar will not close when the user has selected a value\nand will wait until the user clicks off the calendar", "defaultValue": {"value": "false", "computed": false}}, "show_outside_days": {"type": {"name": "bool"}, "required": false, "description": "If True the calendar will display days that rollover into\nthe next month", "defaultValue": {"value": "true", "computed": false}}, "month_format": {"type": {"name": "string"}, "required": false, "description": "Specifies the format that the month will be displayed in the calendar,\nvalid formats are variations of \"MM YY\". For example:\n\"MM YY\" renders as '05 97' for May 1997\n\"MMMM, YYYY\" renders as 'May, 1997' for May 1997\n\"MMM, YY\" renders as 'Sep, 97' for September 1997"}, "display_format": {"type": {"name": "string"}, "required": false, "description": "Specifies the format that the selected dates will be displayed\nvalid formats are variations of \"MM YY DD\". For example:\n\"MM YY DD\" renders as '05 10 97' for May 10th 1997\n\"MMMM, YY\" renders as 'May, 1997' for May 10th 1997\n\"M, D, YYYY\" renders as '07, 10, 1997' for September 10th 1997\n\"MMMM\" renders as 'May' for May 10 1997"}, "disabled": {"type": {"name": "bool"}, "required": false, "description": "If True, no dates can be selected.", "defaultValue": {"value": "false", "computed": false}}, "clearable": {"type": {"name": "bool"}, "required": false, "description": "Whether or not the dropdown is \"clearable\", that is, whether or\nnot a small \"x\" appears on the right of the dropdown that removes\nthe selected value.", "defaultValue": {"value": "false", "computed": false}}, "setProps": {"type": {"name": "func"}, "required": false, "description": "Dash-assigned callback that gets fired when the value changes."}, "bs_size": {"type": {"name": "enum", "value": [{"value": "'sm'", "computed": false}, {"value": "'md'", "computed": false}, {"value": "'lg'", "computed": false}]}, "required": false, "description": "Set the size of the DatePickerSingle. Options: 'sm' (small), 'md' (medium)\nor 'lg' (large). Default is 'md'."}, "disabled_days": {"type": {"name": "arrayOf", "value": {"name": "string"}}, "required": false, "description": "A list of days to disable in addition to any that fall outside of the range\nspecified by min_date_allowed and max_date_allowed."}}}, "src/components/input/Input.js": {"description": "", "displayName": "Input", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "type": {"type": {"name": "enum", "value": [{"value": "\"text\"", "computed": false}, {"value": "'number'", "computed": false}, {"value": "'password'", "computed": false}, {"value": "'email'", "computed": false}, {"value": "'range'", "computed": false}, {"value": "'search'", "computed": false}, {"value": "'tel'", "computed": false}, {"value": "'url'", "computed": false}, {"value": "'hidden'", "computed": false}]}, "required": false, "description": "The type of control to render"}, "value": {"type": {"name": "string"}, "required": false, "description": "The value of the Input"}, "size": {"type": {"name": "string"}, "required": false, "description": "The initial size of the control. This value is in pixels unless the value\nof the type attribute is text or password, in which case it is an integer\nnumber of characters. This attribute applies only when the type attribute\nis set to text, search, tel, url, email, or password, otherwise it is\nignored. In addition, the size must be greater than zero. If you do not\nspecify a size, a default value of 20 is used."}, "bs_size": {"type": {"name": "string"}, "required": false, "description": "Set the size of the Input. Options: 'sm' (small), 'md' (medium)\nor 'lg' (large). Default is 'md'."}, "valid": {"type": {"name": "bool"}, "required": false, "description": "Apply valid style to the Input for feedback purposes. This will cause\nany FormFeedback in the enclosing FormGroup with valid=True to display."}, "invalid": {"type": {"name": "bool"}, "required": false, "description": "Apply invalid style to the Input for feedback purposes. This will cause\nany FormFeedback in the enclosing FormGroup with valid=False to display."}, "plaintext": {"type": {"name": "bool"}, "required": false, "description": "Set to true for a readonly input styled as plain text with the default\nform field styling removed and the correct margins and padding preserved."}, "placeholder": {"type": {"name": "string"}, "required": false, "description": "A hint to the user of what can be entered in the control . The placeholder\ntext must not contain carriage returns or line-feeds. Note: Do not use the\nplaceholder attribute instead of a <label> element, their purposes are\ndifferent. The <label> attribute describes the role of the form element\n(i.e. it indicates what kind of information is expected), and the\nplaceholder attribute is a hint about the format that the content should\ntake. There are cases in which the placeholder attribute is never\ndisplayed to the user, so the form must be understandable without it."}, "name": {"type": {"name": "string"}, "required": false, "description": "The name of the control, which is submitted with the form data."}, "n_submit": {"type": {"name": "number"}, "required": false, "description": "Number of times the `Enter` key was pressed while the input had focus.", "defaultValue": {"value": "0", "computed": false}}, "n_submit_timestamp": {"type": {"name": "number"}, "required": false, "description": "Last time that `Enter` was pressed.", "defaultValue": {"value": "-1", "computed": false}}, "n_blur": {"type": {"name": "number"}, "required": false, "description": "Number of times the input lost focus.", "defaultValue": {"value": "0", "computed": false}}, "n_blur_timestamp": {"type": {"name": "number"}, "required": false, "description": "Last time the input lost focus.", "defaultValue": {"value": "-1", "computed": false}}, "debounce": {"type": {"name": "bool"}, "required": false, "description": "If true, changes to input will be sent back to the Dash server only on enter or when losing focus.\nIf it's false, it will sent the value back on every change.", "defaultValue": {"value": "false", "computed": false}}}}, "src/components/input/InputGroup.js": {"description": "", "displayName": "InputGroup", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component."}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "size": {"type": {"name": "string"}, "required": false, "description": "Set the size of the Input. Options: 'sm' (small), 'md' (medium)\nor 'lg' (large). Default is 'md'."}}}, "src/components/input/InputGroupAddon.js": {"description": "", "displayName": "InputGroupAddon", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component."}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "addon_type": {"type": {"name": "enum", "value": [{"value": "'prepend'", "computed": false}, {"value": "'append'", "computed": false}]}, "required": false, "description": "Whether to prepend or append the addon. Options: 'prepend', or 'append'."}}}, "src/components/input/InputGroupText.js": {"description": "", "displayName": "InputGroupText", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component."}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}}}, "src/components/input/RadioButton.js": {"description": "", "displayName": "RadioButton", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": ""}, "checked": {"type": {"name": "bool"}, "required": false, "description": "Whether RadioButton has been checked or not"}, "className": {"type": {"name": "string"}, "required": false, "description": "The class of the container (div)"}, "style": {"type": {"name": "object"}, "required": false, "description": "The style of the container (div)"}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "setProps": {"type": {"name": "func"}, "required": false, "description": "Dash-assigned callback that gets fired when the value changes."}}}, "src/components/input/RadioItems.js": {"description": "RadioItems is a component that encapsulates several radio item inputs.\nThe values and labels of the RadioItems is specified in the `options`\nproperty and the seleced item is specified with the `value` property.\nEach radio item is rendered as an input with a surrounding label.", "displayName": "RadioItems", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": ""}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "options": {"type": {"name": "arrayOf", "value": {"name": "shape", "value": {"label": {"name": "string", "description": "The radio item's label", "required": false}, "value": {"name": "string", "description": "The value of the radio item. This value\ncorresponds to the items specified in the\n`values` property.", "required": false}, "disabled": {"name": "bool", "description": "If true, this radio item is disabled and can't be clicked on.", "required": false}}}}, "required": false, "description": "An array of options", "defaultValue": {"value": "[]", "computed": false}}, "value": {"type": {"name": "string"}, "required": false, "description": "The currently selected value"}, "style": {"type": {"name": "object"}, "required": false, "description": "The style of the container (div)"}, "className": {"type": {"name": "string"}, "required": false, "description": "The class of the container (div)"}, "inputStyle": {"type": {"name": "object"}, "required": false, "description": "The style of the <input> radio element", "defaultValue": {"value": "{}", "computed": false}}, "inputClassName": {"type": {"name": "string"}, "required": false, "description": "The class of the <input> radio element", "defaultValue": {"value": "''", "computed": false}}, "labelStyle": {"type": {"name": "object"}, "required": false, "description": "The style of the <label> that wraps the radio input\n and the option's label", "defaultValue": {"value": "{}", "computed": false}}, "labelClassName": {"type": {"name": "string"}, "required": false, "description": "The class of the <label> that wraps the radio input\n and the option's label", "defaultValue": {"value": "''", "computed": false}}, "setProps": {"type": {"name": "func"}, "required": false, "description": "Dash-assigned callback that gets fired when the value changes."}, "inline": {"type": {"name": "bool"}, "required": false, "description": "Arrange RadioItems inline"}}}, "src/components/input/Textarea.js": {"description": "A basic HTML textarea for entering multiline text based on the corresponding\ncomponent in dash-core-components", "displayName": "Textarea", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "value": {"type": {"name": "string"}, "required": false, "description": "The value of the textarea"}, "autoFocus": {"type": {"name": "string"}, "required": false, "description": "The element should be automatically focused after the page loaded."}, "cols": {"type": {"name": "string"}, "required": false, "description": "Defines the number of columns in a textarea."}, "disabled": {"type": {"name": "string"}, "required": false, "description": "Indicates whether the user can interact with the element."}, "form": {"type": {"name": "string"}, "required": false, "description": "Indicates the form that is the owner of the element."}, "maxLength": {"type": {"name": "string"}, "required": false, "description": "Defines the maximum number of characters allowed in the element."}, "minLength": {"type": {"name": "string"}, "required": false, "description": "Defines the minimum number of characters allowed in the element."}, "name": {"type": {"name": "string"}, "required": false, "description": "Name of the element. For example used by the server to identify the fields in form submits."}, "placeholder": {"type": {"name": "string"}, "required": false, "description": "Provides a hint to the user of what can be entered in the field."}, "readOnly": {"type": {"name": "string"}, "required": false, "description": "Indicates whether the element can be edited."}, "required": {"type": {"name": "string"}, "required": false, "description": "Indicates whether this element is required to fill out or not."}, "rows": {"type": {"name": "string"}, "required": false, "description": "Defines the number of rows in a text area."}, "wrap": {"type": {"name": "string"}, "required": false, "description": "Indicates whether the text should be wrapped."}, "accessKey": {"type": {"name": "string"}, "required": false, "description": "Defines a keyboard shortcut to activate or add focus to the element."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "contentEditable": {"type": {"name": "string"}, "required": false, "description": "Indicates whether the element's content is editable."}, "contextMenu": {"type": {"name": "string"}, "required": false, "description": "Defines the ID of a <menu> element which will serve as the element's context menu."}, "dir": {"type": {"name": "string"}, "required": false, "description": "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"}, "draggable": {"type": {"name": "string"}, "required": false, "description": "Defines whether the element can be dragged."}, "hidden": {"type": {"name": "string"}, "required": false, "description": "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."}, "lang": {"type": {"name": "string"}, "required": false, "description": "Defines the language used in the element."}, "spellCheck": {"type": {"name": "string"}, "required": false, "description": "Indicates whether spell checking is allowed for the element."}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "tabIndex": {"type": {"name": "string"}, "required": false, "description": "Overrides the browser's default tab order and follows the one specified instead."}, "title": {"type": {"name": "string"}, "required": false, "description": "Text to be displayed in a tooltip when hovering over the element."}, "setProps": {"type": {"name": "func"}, "required": false, "description": "Dash-assigned callback that gets fired when the value changes."}, "bs_size": {"type": {"name": "string"}, "required": false, "description": "Set the size of the Textarea, valid options are 'sm', 'md', or 'lg'"}, "valid": {"type": {"name": "bool"}, "required": false, "description": "Apply valid style to the Textarea for feedback purposes. This will cause\nany FormFeedback in the enclosing FormGroup with valid=True to display."}, "invalid": {"type": {"name": "bool"}, "required": false, "description": "Apply invalid style to the Textarea for feedback purposes. This will cause\nany FormFeedback in the enclosing FormGroup with valid=False to display."}, "n_blur": {"type": {"name": "number"}, "required": false, "description": "Number of times the input lost focus.", "defaultValue": {"value": "0", "computed": false}}, "n_blur_timestamp": {"type": {"name": "number"}, "required": false, "description": "Last time the input lost focus.", "defaultValue": {"value": "-1", "computed": false}}, "n_clicks": {"type": {"name": "number"}, "required": false, "description": "An integer that represents the number of times\nthat this element has been clicked on.", "defaultValue": {"value": "0", "computed": false}}, "n_clicks_timestamp": {"type": {"name": "number"}, "required": false, "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.", "defaultValue": {"value": "-1", "computed": false}}, "debounce": {"type": {"name": "bool"}, "required": false, "description": "If true, changes to input will be sent back to the Dash server only on enter or when losing focus.\nIf it's false, it will sent the value back on every change.", "defaultValue": {"value": "false", "computed": false}}}}, "src/components/layout/Col.js": {"description": "", "displayName": "Col", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "width": {"type": {"name": "custom", "raw": "columnProps"}, "required": false, "description": "Specify the width of the column. Behind the scenes this sets behaviour at\nthe xs breakpoint, and will be overriden if xs is specified.\n\nValid arguments are boolean, an integer in the range 1-12 inclusive, or a\ndictionary with keys 'offset', 'order', 'size'. See the documentation for\nmore details."}, "xs": {"type": {"name": "custom", "raw": "columnProps"}, "required": false, "description": "Specify column behaviour on an extra small screen.\n\nValid arguments are boolean, an integer in the range 1-12 inclusive, or a\ndictionary with keys 'offset', 'order', 'size'. See the documentation for\nmore details."}, "sm": {"type": {"name": "custom", "raw": "columnProps"}, "required": false, "description": "Specify column behaviour on a small screen.\n\nValid arguments are boolean, an integer in the range 1-12 inclusive, or a\ndictionary with keys 'offset', 'order', 'size'. See the documentation for\nmore details."}, "md": {"type": {"name": "custom", "raw": "columnProps"}, "required": false, "description": "Specify column behaviour on a medium screen.\n\nValid arguments are boolean, an integer in the range 1-12 inclusive, or a\ndictionary with keys 'offset', 'order', 'size'. See the documentation for\nmore details."}, "lg": {"type": {"name": "custom", "raw": "columnProps"}, "required": false, "description": "Specify column behaviour on a large screen.\n\nValid arguments are boolean, an integer in the range 1-12 inclusive, or a\ndictionary with keys 'offset', 'order', 'size'. See the documentation for\nmore details."}, "xl": {"type": {"name": "custom", "raw": "columnProps"}, "required": false, "description": "Specify column behaviour on an extra large screen.\n\nValid arguments are boolean, an integer in the range 1-12 inclusive, or a\ndictionary with keys 'offset', 'order', 'size'. See the documentation for\nmore details."}, "align": {"type": {"name": "enum", "value": [{"value": "'start'", "computed": false}, {"value": "'center'", "computed": false}, {"value": "'end'", "computed": false}]}, "required": false, "description": "Set vertical alignment of this column's content in the parent row. Options\nare 'start', 'center', 'end'."}}}, "src/components/layout/Container.js": {"description": "", "displayName": "Container", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "fluid": {"type": {"name": "bool"}, "required": false, "description": "If True the container-fluid class will be applied, and the Container will\nexpand to fill available space. A non-fluid container resizes responsively\nto a fixed width at the different breakpoints."}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to apply the container class to, default: div"}}}, "src/components/layout/Row.js": {"description": "", "displayName": "Row", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "no_gutters": {"type": {"name": "bool"}, "required": false, "description": "Remove the \"gutters\" between columns in this row.\nsee https://getbootstrap.com/docs/4.0/layout/grid/#no-gutters"}, "align": {"type": {"name": "enum", "value": [{"value": "'start'", "computed": false}, {"value": "'center'", "computed": false}, {"value": "'end'", "computed": false}]}, "required": false, "description": "Set vertical alignment of columns in this row. Options are 'start',\n'center' and 'end'."}, "justify": {"type": {"name": "enum", "value": [{"value": "'start'", "computed": false}, {"value": "'center'", "computed": false}, {"value": "'end'", "computed": false}, {"value": "'around'", "computed": false}, {"value": "'between'", "computed": false}]}, "required": false, "description": "Set horizontal spacing and alignment of columns in this row. Options are\n'start', 'center', 'end', 'around' and 'between'."}, "form": {"type": {"name": "bool"}, "required": false, "description": "For use in forms. When set to True the `form-row` class is applied, which\noverrides the default column gutters for a tighter, more compact layout."}}}, "src/components/listgroup/ListGroup.js": {"description": "", "displayName": "ListGroup", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the list, default: ul"}, "flush": {"type": {"name": "bool"}, "required": false, "description": "When True the `list-group-flush` class is applied which removes some borders\nand rounded corners from the list group in order that they can be rendered\nedge-to-edge in the parent container (e.g. a Card)."}}}, "src/components/listgroup/ListGroupItem.js": {"description": "", "displayName": "ListGroupItem", "methods": [{"name": "incrementClicks", "docblock": null, "modifiers": [], "params": [], "returns": null}], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the listgroupitem, default: li"}, "active": {"type": {"name": "bool"}, "required": false, "description": "Apply active style to item"}, "disabled": {"type": {"name": "bool"}, "required": false, "description": "Apply disabled style to item"}, "color": {"type": {"name": "string"}, "required": false, "description": "Item color, options: primary, secondary, success, info, warning,\ndanger, default: secondary"}, "action": {"type": {"name": "bool"}, "required": false, "description": "Apply list-group-item-action class for hover animation etc."}, "href": {"type": {"name": "string"}, "required": false, "description": "Pass a URL (relative or absolute) to make the list group item a link."}, "external_link": {"type": {"name": "bool"}, "required": false, "description": "If true, the browser will treat this as an external link,\nforcing a page refresh at the new location. If false,\nthis just changes the location without triggering a page\nrefresh. Use this if you are observing dcc.Location, for\ninstance. Defaults to true for absolute URLs and false\notherwise."}, "n_clicks": {"type": {"name": "number"}, "required": false, "description": "An integer that represents the number of times\nthat this element has been clicked on."}, "n_clicks_timestamp": {"type": {"name": "number"}, "required": false, "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently."}}}, "src/components/listgroup/ListGroupItemHeading.js": {"description": "", "displayName": "ListGroupItemHeading", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the heading, default: h5"}}}, "src/components/listgroup/ListGroupItemText.js": {"description": "", "displayName": "ListGroupItemText", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the text, default: p"}, "color": {"type": {"name": "string"}, "required": false, "description": "Text color, options: primary, secondary, success, warning, danger, info,\nmuted, light, dark, body, white, black-50, white-50."}}}, "src/components/nav/Nav.js": {"description": "", "displayName": "Nav", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "pills": {"type": {"name": "bool"}, "required": false, "description": "Apply pill styling to nav items. Active items will be indicated by a pill."}, "card": {"type": {"name": "bool"}, "required": false, "description": "Set to True when using Nav with pills styling inside a CardHeader."}, "fill": {"type": {"name": "bool"}, "required": false, "description": "Expand the nav items to fill available horizontal space."}, "justified": {"type": {"name": "bool"}, "required": false, "description": "Expand the nav items to fill available horizontal space, making sure\nevery nav item has the same width."}, "vertical": {"type": {"name": "union", "value": [{"name": "bool"}, {"name": "string"}]}, "required": false, "description": "Stack NavItems vertically. Set to True for a vertical Nav on all screen\nsizes, or pass one of the Bootstrap breakpoints ('xs', 'sm', 'md', 'lg',\n'xl') for a Nav which is vertical at that breakpoint and above, and\nhorizontal on smaller screens."}, "horizontal": {"type": {"name": "enum", "value": [{"value": "\"start\"", "computed": false}, {"value": "\"center\"", "computed": false}, {"value": "\"end\"", "computed": false}]}, "required": false, "description": "Specify the horizontal alignment of the NavItems. Options are 'start',\n'center', or 'end'."}, "navbar": {"type": {"name": "bool"}, "required": false, "description": "Set to True if using Nav in Navbar component. This applies the `navbar-nav`\nclass to the Nav which uses more lightweight styles to match the parent\nNavbar better."}}}, "src/components/nav/NavItem.js": {"description": "", "displayName": "NavItem", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "active": {"type": {"name": "bool"}, "required": false, "description": "Apply active style to item."}}}, "src/components/nav/NavLink.js": {"description": "", "displayName": "NavLink", "methods": [{"name": "incrementClicks", "docblock": null, "modifiers": [], "params": [], "returns": null}], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "href": {"type": {"name": "string"}, "required": false, "description": "The URL of the linked resource."}, "active": {"type": {"name": "bool"}, "required": false, "description": "Apply 'active' style to this component", "defaultValue": {"value": "false", "computed": false}}, "disabled": {"type": {"name": "bool"}, "required": false, "description": "Disable the link", "defaultValue": {"value": "false", "computed": false}}, "external_link": {"type": {"name": "bool"}, "required": false, "description": "If true, the browser will treat this as an external link,\nforcing a page refresh at the new location. If false,\nthis just changes the location without triggering a page\nrefresh. Use this if you are observing dcc.Location, for\ninstance. Defaults to true for absolute URLs and false\notherwise."}, "n_clicks": {"type": {"name": "number"}, "required": false, "description": "An integer that represents the number of times\nthat this element has been clicked on.", "defaultValue": {"value": "0", "computed": false}}, "n_clicks_timestamp": {"type": {"name": "number"}, "required": false, "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.", "defaultValue": {"value": "-1", "computed": false}}}}, "src/components/nav/Navbar.js": {"description": "", "displayName": "Navbar", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "light": {"type": {"name": "bool"}, "required": false, "description": "Applies the `navbar-light` class to the Navbar, causing text in the children\nof the Navbar to use dark colors for contrast / visibility.", "defaultValue": {"value": "true", "computed": false}}, "dark": {"type": {"name": "bool"}, "required": false, "description": "Applies the `navbar-dark` class to the Navbar, causing text in the children\nof the Navbar to use light colors for contrast / visibility."}, "fixed": {"type": {"name": "string"}, "required": false, "description": "Fix the navbar's position at the top or bottom of the page, options: top, bottom"}, "sticky": {"type": {"name": "string"}, "required": false, "description": "Stick the navbar to the top or the bottom of the viewport, options: top, bottom\n\nWith `sticky`, the navbar remains in the viewport when you scroll. By\ncontrast, with `fixed`, the navbar will remain at the top or bottom of\nthe page."}, "color": {"type": {"name": "string"}, "required": false, "description": "Sets the color of the Navbar. Main options are primary, light and dark, default light.\n\nYou can also choose one of the other contextual classes provided by Bootstrap\n(secondary, success, warning, danger, info, white) or any valid CSS color of\nyour choice (e.g. a hex code, a decimal code or a CSS color name)", "defaultValue": {"value": "'light'", "computed": false}}, "role": {"type": {"name": "string"}, "required": false, "description": "The ARIA role attribute."}, "tag": {"type": {"name": "string"}, "required": false, "description": "HTML tag to use for the Navbar, default 'nav'"}, "expand": {"type": {"name": "union", "value": [{"name": "bool"}, {"name": "string"}]}, "required": false, "description": "Specify screen size at which to expand the menu bar, e.g. sm, md, lg etc.", "defaultValue": {"value": "'md'", "computed": false}}, "fluid": {"defaultValue": {"value": "false", "computed": false}, "required": false}}}, "src/components/nav/NavbarBrand.js": {"description": "", "displayName": "NavbarBrand", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "external_link": {"type": {"name": "bool"}, "required": false, "description": "If true, the browser will treat this as an external link,\nforcing a page refresh at the new location. If false,\nthis just changes the location without triggering a page\nrefresh. Use this if you are observing dcc.Location, for\ninstance. Defaults to true for absolute URLs and false\notherwise."}, "href": {"type": {"name": "string"}, "required": false, "description": "URL of the linked resource"}}}, "src/components/nav/NavbarSimple.js": {"description": "", "displayName": "NavbarSimple", "methods": [{"name": "toggle", "docblock": null, "modifiers": [], "params": [], "returns": null}], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "brand": {"type": {"name": "string"}, "required": false, "description": "Brand text, to go top left of the navbar."}, "brand_href": {"type": {"name": "string"}, "required": false, "description": "Link to attach to brand."}, "brand_style": {"type": {"name": "object"}, "required": false, "description": "CSS style options for brand."}, "brand_external_link": {"type": {"name": "bool"}, "required": false, "description": "If true, the browser will treat the brand link as external,\nforcing a page refresh at the new location. If false,\nthis just changes the location without triggering a page\nrefresh. Use this if you are observing dcc.Location, for\ninstance. Defaults to true for absolute URLs and false\notherwise."}, "fluid": {"type": {"name": "bool"}, "required": false, "description": "The contents of the Navbar are wrapped in a container, use fluid=True to\nmake this container fluid, so that in particular, the contents of the\nnavbar fill the available horizontal space.", "defaultValue": {"value": "false", "computed": false}}, "light": {"type": {"name": "bool"}, "required": false, "description": "Applies the `navbar-light` class to the NavbarSimple, causing text in the\nchildren of the Navbar to use dark colors for contrast / visibility.", "defaultValue": {"value": "true", "computed": false}}, "dark": {"type": {"name": "bool"}, "required": false, "description": "Applies the `navbar-dark` class to the NavbarSimple, causing text in the\nchildren of the Navbar to use light colors for contrast / visibility."}, "fixed": {"type": {"name": "string"}, "required": false, "description": "Fix the navbar's position at the top or bottom of the page, options: top,\nbottom"}, "sticky": {"type": {"name": "string"}, "required": false, "description": "Stick the navbar to the top or the bottom of the viewport, options: top, bottom\n\nWith `sticky`, the navbar remains in the viewport when you scroll. By\ncontrast, with `fixed`, the navbar will remain at the top or bottom of\nthe page."}, "color": {"type": {"name": "string"}, "required": false, "description": "Sets the color of the NavbarSimple. Main options are primary, light and dark, default light.\n\nYou can also choose one of the other contextual classes provided by Bootstrap\n(secondary, success, warning, danger, info, white) or any valid CSS color of\nyour choice (e.g. a hex code, a decimal code or a CSS color name)", "defaultValue": {"value": "'light'", "computed": false}}, "expand": {"type": {"name": "union", "value": [{"name": "bool"}, {"name": "string"}]}, "required": false, "description": "Specify breakpoint at which to expand the menu bar. Options are: 'xs',\n'sm', 'md', 'lg', or 'xl'. Below this breakpoint the navbar will collapse\nand navitems will be placed in a togglable collapse element.", "defaultValue": {"value": "'md'", "computed": false}}}}, "src/components/nav/NavbarToggler.js": {"description": "", "displayName": "NavbarToggler", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "type": {"type": {"name": "string"}, "required": false, "description": "Toggle type, default: button."}, "n_clicks": {"type": {"name": "number"}, "required": false, "description": "An integer that represents the number of times\nthat this element has been clicked on.", "defaultValue": {"value": "0", "computed": false}}, "n_clicks_timestamp": {"type": {"name": "number"}, "required": false, "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.", "defaultValue": {"value": "-1", "computed": false}}}}, "src/components/tabs/Tab.js": {"description": "", "displayName": "Tab", "methods": [], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "label": {"type": {"name": "string"}, "required": false, "description": "The tab's label, displayed in the tab itself."}, "tab_id": {"type": {"name": "string"}, "required": false, "description": "Optional identifier for tab used for determining which tab is visible\nif not specified, and Tab is being used inside Tabs component, the tabId\nwill be set to \"tab-i\" where i is (zero indexed) position of tab in list\ntabs pased to Tabs component."}}}, "src/components/tabs/Tabs.js": {"description": "", "displayName": "Tabs", "methods": [{"name": "parseChildrenToArray", "docblock": null, "modifiers": [], "params": [], "returns": null}, {"name": "toggle", "docblock": null, "modifiers": [], "params": [{"name": "tab", "type": null}], "returns": null}], "props": {"id": {"type": {"name": "string"}, "required": false, "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."}, "children": {"type": {"name": "node"}, "required": false, "description": "The children of this component"}, "style": {"type": {"name": "object"}, "required": false, "description": "Defines CSS styles which will override styles previously set."}, "className": {"type": {"name": "string"}, "required": false, "description": "Often used with CSS to style elements with common properties."}, "key": {"type": {"name": "string"}, "required": false, "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"}, "active_tab": {"type": {"name": "string"}, "required": false, "description": "Determine which tab is currently showing. Will be the id of the tab or\n'tab-i' where i is the index of the tab (indexed from zero)"}, "card": {"type": {"name": "bool"}, "required": false, "description": "Set to True if using tabs inside a CardHeader."}}}}